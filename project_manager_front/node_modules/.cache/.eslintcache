[{"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\index.js":"1","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\App.js":"2","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Login.jsx":"3","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\ProjectManager.jsx":"4","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\csrftoken.jsx":"5","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Register.jsx":"6","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Index.jsx":"7","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Projects.jsx":"8","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Home.jsx":"9","C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Project.jsx":"10"},{"size":197,"mtime":1616530648785,"results":"11","hashOfConfig":"12"},{"size":160,"mtime":1616567163306,"results":"13","hashOfConfig":"12"},{"size":2315,"mtime":1617136834460,"results":"14","hashOfConfig":"12"},{"size":999,"mtime":1617136266460,"results":"15","hashOfConfig":"12"},{"size":267,"mtime":1616568308979,"results":"16","hashOfConfig":"12"},{"size":2770,"mtime":1617136865995,"results":"17","hashOfConfig":"12"},{"size":4027,"mtime":1617482308583,"results":"18","hashOfConfig":"12"},{"size":5470,"mtime":1617482452112,"results":"19","hashOfConfig":"12"},{"size":1550,"mtime":1616971826211,"results":"20","hashOfConfig":"12"},{"size":27974,"mtime":1617422092979,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2grv77",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\index.js",[],["44","45"],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\App.js",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Login.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\ProjectManager.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\csrftoken.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Register.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Index.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Projects.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Home.jsx",[],"C:\\Users\\paulb\\Documents\\Desarrollos\\Django_React_Project_Manager\\project_manager_front\\src\\Components\\Project.jsx",["46"],"import React, { useState, useEffect } from 'react';\r\nimport CSRFToken from './csrftoken';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst csrftoken = Cookies.get('csrftoken');\r\n\r\n// Fetch create column\r\nasync function create_column(name, id) {\r\n    return fetch('/create_column', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            name: name,\r\n            project_id: id\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch create task\r\nasync function create_task(column_id, name, description, color) {\r\n    return fetch('/create_task', {\r\n        method: 'POST',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            column_id: column_id,\r\n            name: name,\r\n            description: description,\r\n            color: color\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch change task to another column\r\nasync function change_task_column(column_id, task_id) {\r\n    return fetch('/change_task_column', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            column_id: column_id,\r\n            task_id: task_id\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch edit task\r\nasync function edit_task(task_id, new_name, new_description, new_color) {\r\n    return fetch('/edit_task', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            task_id: task_id,\r\n            new_name: new_name,\r\n            new_description: new_description,\r\n            new_color: new_color\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch delete task\r\nasync function delete_task(task_id) {\r\n    return fetch('/delete_task', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            task_id: task_id\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch edit column\r\nasync function edit_column(column_id, new_name) {\r\n    return fetch('/edit_column', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            column_id: column_id,\r\n            new_name: new_name\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch delete column\r\nasync function delete_column(column_id) {\r\n    return fetch('/delete_column', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            column_id: column_id\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch edit project\r\nasync function edit_project(project_id, new_name, new_description) {\r\n    return fetch('/edit_project', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            project_id: project_id,\r\n            new_name: new_name,\r\n            new_description: new_description\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\n// Fetch delete project\r\nasync function delete_project(project_id) {\r\n    return fetch('/delete_project', {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'X-CSRFToken': csrftoken\r\n        },\r\n        body: JSON.stringify({\r\n            project_id: project_id\r\n        })\r\n      })\r\n      .then(response => response.json());\r\n}\r\n\r\nexport default function Project(props){\r\n\r\n    // Display project information\r\n    const [projectId, setProjectId] = useState();\r\n    const [projectName, setProjectName] = useState();\r\n    const [projectDescription, setProjectDescription] = useState();\r\n    const [projectColumns, setProjectColumns] = useState([]);\r\n    // Render form, render number of columns, and create a new column\r\n    const [addColumn, setAddColumn] = useState(true);\r\n    const [columnNum, setColumnNum] = useState(3);\r\n    const [columnForm, setColumnForm] = useState(false);\r\n    const [columnName, setColumnName] = useState();\r\n    // Render form and create a new task\r\n    const [taskForm, setTaskForm] = useState(false);\r\n    const [taskColumn, setTaskColumn] = useState();\r\n    const [taskName, setTaskName] = useState();\r\n    const [taskDescription, setTaskDescription] = useState();\r\n    const [taskColor, setTaskColor] = useState();\r\n    // Change task to another column\r\n    const [newColumnTask, setNewColumnTask] = useState();\r\n    // Render task change form and edit task form (This saves the task id)\r\n    const [changeTaskColumnForm, setChangeTaskColumnForm] = useState();\r\n    // New values to edit task\r\n    const [newTaskName, setNewTaskName] = useState();\r\n    const [newTaskDescription, setNewTaskDescription] = useState();\r\n    const [newTaskColor, setNewTaskColor] = useState();\r\n    // Render form to edit column (This saves the column id)\r\n    const [editColumnForm, setEditColumnForm] = useState('');\r\n    // New values to edit column\r\n    const [newColumnName, setNewColumnName] = useState();\r\n    // Render form to edit project\r\n    const [editProjectForm, setEditProjectForm] = useState();\r\n    // New values to edit project\r\n    const [newProjectName, setNewProjectName] = useState();\r\n    const [newProjectDescription, setNewProjectDescription] = useState();\r\n    // Delete tasks, columns or projects\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    // Needed to get all projects\r\n    useEffect(() => {\r\n        fetchProject();\r\n    }, [])\r\n\r\n    const fetchProject = async () => {\r\n        const id = props.id;\r\n        const response = await fetch(`/project/${id}`);\r\n        const data = await response.json();\r\n        setProjectId(data.project.id);\r\n        setProjectName(data.project.name);\r\n        setProjectDescription(data.project.description);\r\n        setProjectColumns(data.columns);\r\n        // Change layout depending on number of columns\r\n        // Max number of columns accepted is 6\r\n        if (data.columns.length <= 3) {\r\n            setColumnNum(3);\r\n            setAddColumn(true);\r\n        } else if (data.columns.length === 4 || data.columns.length === 5 ) {\r\n            setColumnNum(2);\r\n            setAddColumn(true);\r\n        } else {\r\n            setColumnNum(2);\r\n            setAddColumn(false);\r\n        }\r\n    }\r\n\r\n    // Reload the information of the page with new changes\r\n    function reload(data) {\r\n        console.log(data);\r\n        props.setPage('projects');\r\n        props.setPage('project');\r\n    }\r\n\r\n    // Create a new column in this project\r\n    const handleCreateColumn = async e => {\r\n        e.preventDefault();\r\n        const data = await create_column(columnName, props.id);\r\n        setColumnForm(false);\r\n        reload(data);\r\n    }\r\n\r\n    // Create a new column in this project\r\n    const handleCreateTask = async e => {\r\n        e.preventDefault();\r\n        const data = await create_task(taskColumn, taskName, taskDescription, taskColor);\r\n        setTaskForm(false);\r\n        reload(data);\r\n    }\r\n\r\n    // Change task to another column\r\n    const handleChangeTask = async e => {\r\n        e.preventDefault();\r\n        const data = await change_task_column(newColumnTask, changeTaskColumnForm);\r\n        reload(data);\r\n    }\r\n\r\n    // Edit task\r\n    const handleEditTask = async e => {\r\n        e.preventDefault();\r\n        const data = await edit_task(changeTaskColumnForm, newTaskName, newTaskDescription, newTaskColor);\r\n        reload(data);\r\n    }\r\n\r\n    // Delete task\r\n    const handleDeleteTask = async e => {\r\n        e.preventDefault();\r\n        const data = await delete_task(changeTaskColumnForm);\r\n        reload(data);\r\n    }\r\n\r\n    // Edit Column\r\n    const handleEditColumn = async e => {\r\n        e.preventDefault();\r\n        const data = await edit_column(editColumnForm, newColumnName);\r\n        reload(data);\r\n    }\r\n\r\n    // Delete Column\r\n    const handleDeleteColumn = async e => {\r\n        e.preventDefault();\r\n        const data = await delete_column(editColumnForm);\r\n        reload(data);\r\n    }\r\n\r\n    // Edit Project\r\n    const handleEditProject = async e => {\r\n        e.preventDefault();\r\n        const data = await edit_project(projectId, newProjectName, newProjectDescription);\r\n        reload(data);\r\n    }\r\n\r\n    // Delete Project\r\n    const handleDeleteProject = async e => {\r\n        e.preventDefault();\r\n        const data = await delete_project(projectId);\r\n        window.location.reload();\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* Render form to edit project */}\r\n            { editProjectForm ?\r\n                // Change const to render again the title and description when mouse goes out\r\n                <div onMouseLeave={() => {\r\n                        setEditProjectForm(false);\r\n                        setChecked('');\r\n                    }}>\r\n                    <form onSubmit={handleEditProject}>\r\n                        <CSRFToken />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-3\">\r\n                                <input type=\"text\" className=\"form-control mb-2\" required value={newProjectName} onChange={e => setNewProjectName(e.target.value)} />\r\n                            </div>\r\n                            <div className=\"col-lg-6\">\r\n                                <textarea rows=\"4\" className=\"form-control mb-2\" required value={newProjectDescription} onChange={e => setNewProjectDescription(e.target.value)}></textarea>\r\n                            </div>\r\n                            <div className=\"col-lg-3\">\r\n                                <div className=\"d-grid gap-2\">\r\n                                    <input type=\"submit\" className=\"btn btn-outline-warning mb-3\" value=\"Edit\" />\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-lg-6\">\r\n                                        <div className=\"form-check m-2 text-center\">\r\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"delete_project\" onChange={(e) => setChecked(e.target.checked)} />\r\n                                            <label htmlFor=\"delete_project\">Check to delete Project</label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6\">\r\n                                        <div className=\"d-grid gap-2\">\r\n                                            {/* Ask if it is possible to delete the project */}\r\n                                            { checked ?\r\n                                                <button className=\"btn btn-outline-danger\" onClick={handleDeleteProject} >Delete</button>\r\n                                                :\r\n                                                <button className=\"btn btn-outline-danger\" onClick={handleDeleteProject} disabled>Delete</button>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <br/>\r\n                </div>\r\n                :\r\n                // Show forms to edit and delete project on mouse enter\r\n                <div onMouseEnter={() => {\r\n                    setNewProjectName(projectName);\r\n                    setNewProjectDescription(projectDescription);\r\n                    setEditProjectForm(true);\r\n                    }} >\r\n                    <h1>{projectName}</h1>\r\n                    <p className=\"fs-4 m-3\">{projectDescription}</p>\r\n                </div>\r\n            }\r\n            <div className=\"row\">\r\n                {/* Map all the columns from the project and render them */}\r\n                {projectColumns.map(column => (\r\n                    <div key={column.id} id={column.id} className={`col-lg-${columnNum}`} onMouseLeave={() => {\r\n                        setChangeTaskColumnForm('');\r\n                        setTaskColumn('');\r\n                        setChecked('');\r\n                    }}>\r\n                        <div className=\"card-body shadow p-4 bg-white rounded\">\r\n                            {/* Render form to edit and delete each column */}\r\n                            { editColumnForm === column.id?\r\n                                <div onMouseLeave={() => {\r\n                                    setEditColumnForm('');\r\n                                    setChecked('');\r\n                                }}>\r\n                                    <form onSubmit={handleEditColumn}>\r\n                                        <CSRFToken />\r\n                                        <input type=\"text\" className=\"form-control\" required value={newColumnName} onChange={e => setNewColumnName(e.target.value)} />\r\n                                        <br/>\r\n                                        <div className=\"d-grid gap-2\">\r\n                                            <input type=\"submit\" className=\"btn btn-outline-warning\" value=\"Edit\" />\r\n                                        </div>\r\n                                    </form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-6\">\r\n                                            <div className=\"form-check m-2 text-center\">\r\n                                                <input className=\"form-check-input\" type=\"checkbox\" id=\"delete_project\" onChange={(e) => setChecked(e.target.checked)} />\r\n                                                <label htmlFor=\"delete_project\">Check to delete Column</label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-lg-6\">\r\n                                            <div className=\"d-grid gap-2\">\r\n                                                {/* Ask if it is possible to delete the column */}\r\n                                                { checked ?\r\n                                                    <button className=\"btn btn-outline-danger mt-3\" onClick={handleDeleteColumn} >Delete</button>\r\n                                                    :\r\n                                                    <button className=\"btn btn-outline-danger mt-3\" onClick={handleDeleteColumn} disabled>Delete</button>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                // Hide other forms\r\n                                <div onMouseEnter={() => {\r\n                                    setNewColumnName(column.name);\r\n                                    setEditColumnForm(column.id);\r\n                                    setChangeTaskColumnForm('');\r\n                                    setChecked('');\r\n                                }}>\r\n                                    <h5 className=\"card-title\">{column.name}</h5>\r\n                                </div>\r\n                            }\r\n                            <br/>\r\n                            {/* Map all tasks in this column and render them */}\r\n                            {column.tasks.map(task => (\r\n                                <div key={task.id} id={task.id} className={`card border-${task.color} card-body mb-3`} onMouseEnter={() => {\r\n                                    setChangeTaskColumnForm(task.id);\r\n                                    setNewTaskName(task.name);\r\n                                    setNewTaskDescription(task.description);\r\n                                    setNewTaskColor(task.color);\r\n                                }} >\r\n                                    {/* Change to edit when mouse enter the task */}\r\n                                    { changeTaskColumnForm === task.id ?\r\n                                        <div>\r\n                                            <form onSubmit={handleEditTask}>\r\n                                                <CSRFToken />\r\n                                                <input type=\"text\" className=\"form-control\" required value={newTaskName} onChange={e => setNewTaskName(e.target.value)} />\r\n                                                <br/>\r\n                                                <textarea rows=\"5\" className=\"form-control\" required value={newTaskDescription} onChange={e => setNewTaskDescription(e.target.value)}></textarea>\r\n                                                <br/>\r\n                                                <select className=\"form-select\" required onChange={e => setNewTaskColor(e.target.value)}>\r\n                                                    <option>Select new color</option>\r\n                                                    <option value=\"primary\" className=\"bg-primary text-white\">Blue</option>\r\n                                                    <option value=\"secondary\" className=\"bg-secondary text-white\">Grey</option>\r\n                                                    <option value=\"success\" className=\"bg-success text-white\">Green</option>\r\n                                                    <option value=\"danger\" className=\"bg-danger text-white\">Red</option>\r\n                                                    <option value=\"warning\" className=\"bg-warning text-white\">Yellow</option>\r\n                                                    <option value=\"info\" className=\"bg-info text-white\">Sky Blue</option>\r\n                                                    <option value=\"light\" className=\"bg-light\">Light Grey</option>\r\n                                                    <option value=\"dark\" className=\"bg-dark text-white\">Black</option>\r\n                                                </select>\r\n                                                <br/>\r\n                                                <div className=\"d-grid gap-2\">\r\n                                                    <input type=\"submit\" className=\"btn btn-outline-warning\" value=\"Edit\" />\r\n                                                </div>\r\n                                                <br/>\r\n                                            </form>\r\n                                            {/* Option to delete the task */}\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-auto\">\r\n                                                    <div className=\"form-check m-2 text-center\">\r\n                                                        <input className=\"form-check-input\" type=\"checkbox\" id=\"delete_task\" onChange={(e) => setChecked(e.target.checked)} />\r\n                                                        <label htmlFor=\"delete_task\">Check</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-auto\">\r\n                                                    <div className=\"d-grid gap-2\">\r\n                                                        { checked ?\r\n                                                            <button className=\"btn btn-outline-danger\" onClick={handleDeleteTask} >Delete</button>\r\n                                                            :\r\n                                                            <button className=\"btn btn-outline-danger\" onClick={handleDeleteTask} disabled>Delete</button>\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <br/>\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                            <h6 className=\"card-title\">{task.name}</h6>\r\n                                            <p className=\"card-text fw-light\">{task.description}</p>\r\n                                        </div>\r\n                                    }\r\n                                    <p className=\"fw-light fst-italic\">{task.creation_date}</p>\r\n                                    {/* Show change task to another column form */}\r\n                                    { changeTaskColumnForm === task.id && \r\n                                        <div>\r\n                                            <p>Click to change column</p>\r\n                                            <form onSubmit={handleChangeTask}>\r\n                                                <CSRFToken />\r\n                                                <div className=\"row\">\r\n                                                    {/* Map all column names to show buttons */}\r\n                                                    {projectColumns.map(col => (\r\n                                                        // Only show buttons that move task to other columns\r\n                                                        column.id !== col.id &&\r\n                                                            <div key={col.id} className=\"col-auto mb-2\">\r\n                                                                <div className=\"d-grid gap-2\">\r\n                                                                    <button type=\"submit\" className=\"btn btn-outline-primary\" onClick={() => {\r\n                                                                        setNewColumnTask(col.id);\r\n                                                                    }}>{col.name}</button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            </form>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            ))}\r\n                            {/* Ask if it is needed to render a button to display the form or to render the form to add a task */}\r\n                            {taskForm && taskColumn === column.id ?\r\n                                /* Render form to add task */\r\n                                <div className=\"card-body shadow p-4 bg-light rounded\">\r\n                                    <form onSubmit={handleCreateTask}>\r\n                                        <CSRFToken />\r\n                                        <select className=\"form-select\" required onChange={e => setTaskColor(e.target.value)}>\r\n                                            <option value=''>Select a color</option>\r\n                                            <option value=\"primary\" className=\"bg-primary text-white\">Blue</option>\r\n                                            <option value=\"secondary\" className=\"bg-secondary text-white\">Grey</option>\r\n                                            <option value=\"success\" className=\"bg-success text-white\">Green</option>\r\n                                            <option value=\"danger\" className=\"bg-danger text-white\">Red</option>\r\n                                            <option value=\"warning\" className=\"bg-warning text-white\">Yellow</option>\r\n                                            <option value=\"info\" className=\"bg-info text-white\">Sky Blue</option>\r\n                                            <option value=\"light\" className=\"bg-light\">Light Grey</option>\r\n                                            <option value=\"dark\" className=\"bg-dark text-white\">Black</option>\r\n                                        </select>\r\n                                        <br/>\r\n                                        <input type=\"text\" className=\"form-control\" placeholder=\"Name\" required onChange={e => setTaskName(e.target.value)}/>\r\n                                        <br/>\r\n                                        <textarea rows=\"5\" className=\"form-control\" placeholder=\"Description\" required onChange={e => setTaskDescription(e.target.value)}></textarea>\r\n                                        <br/>\r\n                                        <div className=\"d-grid gap-2\">\r\n                                            <input type=\"submit\" className=\"btn btn-outline-primary\" value=\"Create Task\" />\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                                :\r\n                                /* Render button to display the form */\r\n                                <div className=\"d-grid gap-2\">\r\n                                    <button className=\"btn\" onClick={() => {\r\n                                        setTaskColumn(column.id);\r\n                                        setTaskForm(true);\r\n                                    }}>\r\n                                        <div className=\"card-body shadow-sm p-4 bg-light rounded text-center\">\r\n                                            <p className=\"fs-6 m-1\">Add new Task</p>\r\n                                        </div>\r\n                                    </button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                {/* Ask if a column can be added */}\r\n                {addColumn &&\r\n                    <div className={`col-lg-${columnNum}`} onMouseLeave={() => setColumnForm(false)}>\r\n                        {/* Ask if it is needed to render a button to display the form or to render the form to add a column */}\r\n                        {columnForm ?\r\n                            /* Render form to add column */\r\n                            <div className=\"card-body shadow p-4 bg-light rounded\">\r\n                                <form onSubmit={handleCreateColumn}>\r\n                                    <CSRFToken />\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Name\" required onChange={e => setColumnName(e.target.value)}/>\r\n                                    <br/>\r\n                                    <div className=\"d-grid gap-2\">\r\n                                        <input type=\"submit\" className=\"btn btn-outline-primary\" value=\"Create Column\"/>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            :\r\n                            /* Render button to display form */\r\n                            <div className=\"d-grid gap-2\" >\r\n                                <button className=\"btn\" onClick={() => setColumnForm(true)}>\r\n                                    <div className=\"card-body shadow-sm p-4 bg-light rounded d-flex\">\r\n                                        <p className=\"fs-1 m-3\">+</p>\r\n                                        <p className=\"fs-5 m-3\">Add new Column</p>\r\n                                    </div>\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":185,"column":8,"nodeType":"53","endLine":185,"endColumn":10,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProject'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [fetchProject]",{"range":"60","text":"61"},[5701,5703],"[fetchProject]"]